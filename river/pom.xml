<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
           http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.lolRiver</groupId>
    <artifactId>river</artifactId>
    <packaging>war</packaging>
    <version>0.0.4</version>
    <name>Lol River</name>

    <properties>
        <test-assembly-dir>${project.build.directory}/river</test-assembly-dir>

        <!-- Git repository -->
        <skeletor.git_repo>github:opqpop/river.git</skeletor.git_repo>

        <!-- Additional classpaths to run with local Jetty (invoked with 'mvn jetty:run') Separate multiple paths with ; -->
        <skeletor.jetty_extra_classpath>${project.build.outputDirectory}</skeletor.jetty_extra_classpath>

        <!-- Version strings -->
        <jetty.version>8.1.10.v20130312</jetty.version>
        <org.springframework.version>3.2.0.RELEASE</org.springframework.version>
        <resteasy.version>2.3.6.Final</resteasy.version>
        <powermock.version>1.5</powermock.version>
        <flyway.version>2.2</flyway.version>

        <!-- Code Coverage version strings -->
        <checkstyle.version>2.9.1</checkstyle.version>
        <findbugs.version>2.5.2</findbugs.version>
        <cobertura.version>2.5.2</cobertura.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <scm>
        <connection>scm:git:${skeletor.git_repo}</connection>
        <developerConnection>scm:git:${skeletor.git_repo}</developerConnection>
    </scm>

    <build>
        <finalName>${project.artifactId}-${project.version}-${buildNumber}</finalName>

        <!-- Used by git-commit-id-plugin -->
        <resources>
            <resource>
                <directory>src/main/webapp</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/VERSION</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <!-- merchantdata-config YML files -->
                    <include>**/*.yml</include>
                    <!-- migration files -->
                    <include>**/*.sql</include>
                </includes>
            </resource>
            <!-- Test dir 'includes' files -->
            <resource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <!-- merchantdata-config YML files -->
                    <include>**/*.yml</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- make jetty work with aws beanstalk http://www.eclipse.org/jetty/documentation/current/elastic-beanstalk.html#elastic-beanstalk-overview -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-test-webapp</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.lolRiver</groupId>
                                    <artifactId>river</artifactId>
                                    <version>0.0.4-SNAPSHOT</version>
                                    <type>war</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${test-assembly-dir}/</outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.eclipse.jetty.beanstalk</groupId>
                                    <artifactId>jetty-beanstalk-overlay</artifactId>
                                    <version>${project.version}</version>
                                    <type>zip</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${test-assembly-dir}/</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <tarLongFileMode>gnu</tarLongFileMode>
                    <descriptors>
                        <descriptor>src/assemble/beanstalk-testapp.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Populates the ${buildNumber} variable with the most recent git commit tag (or sha if no tag exists) -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>1.2</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <shortRevisionLength>10</shortRevisionLength>
                    <doCheck>false</doCheck>
                    <doUpdate>false</doUpdate>
                </configuration>
            </plugin>

            <!-- This plugin runs custom scripts during various parts of the build lifecycle  -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>

                    <!-- This execution & the bash script below saves the current  -->
                    <!-- git commit ID into a REVISION file during the compile phase -->
                    <execution>
                        <id>store-git-revision</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>script/store-git-revision.sh</executable>
                        </configuration>
                    </execution>

                    <!-- This execution enables calling uber_deploy when 'mvn deploy' is run. -->
                    <execution>
                        <id>run-uber-deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>cap</executable>
                            <arguments>
                                <argument>${skeletor.uber_deploy_hosts}</argument>
                                <argument>deploy:app_servers</argument>
                                <argument>
                                    WARPATH=${project.build.directory}/${project.build.finalName}.${project.packaging}
                                </argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- This plugin definition disables 'mvn deploy' from deploying to Nexus.  See exec-maven-plugin section. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- Jetty Plugin -->
            <!-- mvn jetty:run to start the app in development -->
            <!-- http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <configuration>
                    <connectors>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <port>8080</port>
                        </connector>
                    </connectors>
                    <scanIntervalSeconds>1000000000</scanIntervalSeconds>
                    <stopKey>stop</stopKey>
                    <stopPort>8089</stopPort>
                    <systemProperties>
                        <systemProperty>
                            <name>custom.logpath</name>
                            <value>${project.build.directory}</value>
                        </systemProperty>
                        <!-- modify this to change environment for properties list-->
                        <systemProperty>
                            <name>merchantdata.environment</name>
                            <value>development</value>
                        </systemProperty>
                    </systemProperties>
                    <webApp>
                        <contextPath>/</contextPath>
                        <!-- extraClasspath - Comma or semicolon separated path of filenames
                            or URLs pointing to directories or jar files. Directories should end with '/' -->
                        <extraClasspath>${skeletor.jetty_extra_classpath};</extraClasspath>
                    </webApp>
                </configuration>
            </plugin>

            <!-- maven-surefire-plugin is the default target when running 'mvn elophant'.  We include it here  -->
            <!-- since we need to specify the custom.logpath variable in order for our logging to work.    -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.14.1</version>
                <configuration>
                    <systemPropertyVariables>
                        <custom.logpath>${project.build.directory}</custom.logpath>
                        <buildDirectory>${project.build.directory}</buildDirectory>
                        <merchantdata.environment>development</merchantdata.environment>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- BEGIN code coverage plugins -->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${findbugs.version}</version>
                <executions>
                    <execution>
                        <id>findbugs-check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                            <goal>findbugs</goal>
                        </goals>
                        <configuration>
                            <failOnError>false</failOnError>
                            <effort>Max</effort>
                            <threshold>High</threshold>
                            <includeTests>true</includeTests>
                            <xmlOutput>true</xmlOutput>
                            <xmlOutputDirectory>target/site/findbugs</xmlOutputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${checkstyle.version}</version>
                <executions>
                    <execution>
                        <id>checkstyle-check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>checkstyle</goal>
                            <goal>checkstyle-aggregate</goal>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <consoleOutput>true</consoleOutput>
                            <logViolationsToConsole>true</logViolationsToConsole>
                            <failOnViolation>false</failOnViolation>
                            <maxAllowedViolations>10</maxAllowedViolations>
                            <configLocation>${project.basedir}/src/test/resources/checkstyle.xml</configLocation>
                            <includeTestSourceDirectory>true</includeTestSourceDirectory>
                            <type>xml</type>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${cobertura.version}</version>
                <executions>
                    <execution>
                        <id>cobertura-check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>clean</goal>
                            <goal>cobertura</goal>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <aggregate>true</aggregate>
                            <formats>
                                <format>html</format>
                                <format>xml</format>
                            </formats>
                            <check>
                                <branchRate>0</branchRate>
                                <lineRate>0</lineRate>
                                <totalBranchRate>0</totalBranchRate>
                                <totalLineRate>0</totalLineRate>
                                <packageLineRate>0</packageLineRate>
                                <packageBranchRate>0</packageBranchRate>
                            </check>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- END code coverage plugins -->

            <!-- This plugin generates super-useful git repo information into a git.properties file, -->
            <!-- which is accessible inside our app from the /revision and /git_status endpoints.    -->
            <!-- https://github.com/ktoso/maven-git-commit-id-plugin -->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <prefix>git</prefix>
                    <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>
                    <verbose>true</verbose>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <skipPoms>true</skipPoms>

                    <generateGitPropertiesFilename>src/main/resources/git.properties</generateGitPropertiesFilename>
                    <failOnNoGitDirectory>false</failOnNoGitDirectory>
                    <gitDescribe>
                        <!-- don't generate the describe property -->
                        <skip>false</skip>
                        <always>false</always>
                        <!-- how many chars should be displayed as the commit object id? -->
                        <abbrev>7</abbrev>
                        <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
                        <dirty>-dirty</dirty>
                        <forceLongFormat>false</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>

            <!-- Source plugin, builds a sources .jar in /target (mvn:jar) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <configuration>
                    <skipSource>${skeletor.skip_source_build}</skipSource>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- The Versions Plugin is used when you want to manage the versions of artifacts in a project's POM -->
            <!-- i.e. mvn versions:set 1.3, or mvn versions:revert -->
            <!-- see mvn versions:help for more info -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>1.3.1</version>
            </plugin>

            <!-- Compiler plugin, change default source version to 1.6 -->
            <!-- (Apparently it defaults to 1.5) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.googlecode.flyway</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>${flyway.version}</version>
                <configuration>
                    <user>river</user>
                    <password>river</password>
                    <driver>com.mysql.jdbc.Driver</driver>
                    <url>jdbc:mysql://localhost:3306/river</url>
                    <locations>
                        <location>filesystem:src/main/resources/db/migration</location>
                    </locations>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>codehaus</id>
            <url>http://repository.codehaus.org/org/codehaus</url>
        </repository>
    </repositories>

    <dependencies>
        <!-- START Skeletor Java -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-vfs2</artifactId>
            <version>2.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
        </dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.2.6</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>0.8.1</version>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path-assert</artifactId>
            <version>0.8.1</version>
            <scope>test</scope>
        </dependency>

        <!-- HTTP Connection Pooling -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.3-beta2</version>
        </dependency>
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.2.6</version>
        </dependency>

        <!-- Jackson JSON Processor -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.2.0</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.1.4</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.12</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-core-asl</artifactId>
            <version>1.9.13</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!-- snakeYAML -->
        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
            <version>1.13</version>
        </dependency>

        <!-- migrations with flyway -->
        <dependency>
            <groupId>com.googlecode.flyway</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.flyway-test-extensions</groupId>
            <artifactId>flyway-dbunit-test</artifactId>
            <version>${flyway.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-simple</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- c3p0 MySQL connection management-->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.2.1</version>
        </dependency>

        <!-- MySQL JDBC Driver -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.26</version>
        </dependency>

        <!-- for some reason, need the @Named annotation to make resteasy/spring work together -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>

        <!-- Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${org.springframework.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.5</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>apache-log4j-extras</artifactId>
            <version>1.1</version>
        </dependency>

        <!-- Test Frameworks -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.simpleframework</groupId>
            <artifactId>simple</artifactId>
            <version>5.1.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>15.0</version>
        </dependency>

        <!-- need for LeagueLib -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.2.2</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml</groupId>
            <artifactId>jackson-xml-databind</artifactId>
            <version>0.6.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.2.0</version>
        </dependency>
        <!-- END Skeletor Java -->

    </dependencies>

</project>
